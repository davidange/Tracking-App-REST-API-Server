const express = require("express");
const router = express.Router();

const trackingEntitiesController = require("../controllers/tracking-entities");
const verifyBimPlusToken = require("../middlewares/authentication/verifyBimPlusToken");
const verifyAccessToken = require("../middlewares/authentication/verifyToken");
const trackedEntitiesValidator = require("../middlewares/validators/tracking-entities");
//wrapper to catch errors
let wrapper = (fn) => (...args) => fn(...args).catch(args[2]);


/**
 * @api {put} /projects/:project-id/tracked-users Put the location of the user that is making the API call.
 * @apiName Put Location of Tracked User
 * @apiGroup Tracked User
 * @apiDescription  Depending on the parameters chosen, the location of the user that made the call is estimated and saved.
 * The location of the user is calculated by weighted trilateration (in case that the beacons measurement are used) or by GPS location.
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * 
 *
 * @apiParam {String="beacon-trilateration","gps-location"} location_method Method that will be used to calculate the user's location
 * 
 * @apiParam (Beacon Trilateration Parameter) {json[]} measurement_data List of Measurements taken for the localization
 * @apiParam (Beacon Trilateration Parameter) {Number} measurement_data.distance distance from Beacon. (in Meters)
 * @apiParam (Beacon Trilateration Parameter) {String} measurement_data.beacon_uid uid from Beacon that distance was taken from.
 * 
 * @apiParam (GPS Parameter) {json} measurement_data JSON object with data (STILL NOT IMPLEMENTED)
 * 
 * @apiParamExample {json} Request-Example:
 * {
 * 	location_method:"beacon-trilateration"
 * 	data:[
 * 			{ distance: 1, beacon_uid: "hereGoesBeaconUid" },
 *			{ distance: 2, beacon_uid: "hereGoesBeaconUid" },
 *			{ distance: 3, beacon_uid: "hereGoesBeaconUid"},
 *      ]
 * }
 * 
 * @apiSuccess  (Success 200) {String} message Indicates success of saving the Users location.
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  "message": "Successfully Stored User's Location"
 *}
 */
router.put(
	"/:project_id/tracked-users",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.putTrackedUserValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.putTrackedUser)
);

/**
 * @api {get} /projects/:project-id/tracked-users Get list of locations of tracked users
 * @apiName Get List of Location of Tracked Users
 * @apiGroup Tracked User
 * @apiDescription  Will return a list of tracked Users 
 * 
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * 
 * @apiSuccess  (Success 200) {json[]} tracked_users List of tracked users
 * @apiSuccess (Success 200) {String} tracked_users.entityType type of tracked Entity
 * @apiSuccess (Success 200) {json} tracked_users.location represents the coordinates of the item
 * @apiSuccess (Success 200) {Number} tracked_users.location.x x coordinate
 * @apiSuccess (Success 200) {Number} tracked_users.location.y y coordinate
 * @apiSuccess (Success 200) {Number} tracked_users.location.z z coordinate
 * @apiSuccess (Success 200) {json} tracked_users.user object that contains information about the user
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  tracked_users: [
 * 	{
 *   entityType: 'TrackedUser',
 *   location: { x: 0, y: 2, z: 3 },
 *   user: {
 *     _id: 5f1aaba0b8ee114a141cd0db,
 *     email: 'test@test.com',
 *     name: 'testingName'
 *   
 * 	}
 * ]
 *}
 */
router.get(
	"/:project_id/tracked-users",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.getTrackedUsersValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.getTrackedUsers)
);


/**
 * @api {get} /projects/:project-id/tracked-users/:user_id get Information about Specific Tracked User
 * @apiName Get  Location of Tracked User
 * @apiGroup Tracked User
 * @apiDescription  Will return information of tracked User
 * 
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * 
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  tracked_user:
 *	{
 *		entityType: 'TrackedUser',
 *		_id: 5f833a39648d96391ca03ed0,
 *		location: { x: 0, y: 2, z: 3 },
 *		user: {
 *			_id: 5f1aaba0b8ee114a141cd0db,
 *			email: 'test@test.com',
 *			name: 'testingName'
 *		},
 *		project_ref: 5f3aaba0b8ee114a141cd0da,
 *		date: 2020-10-11T17:00:42.072Z,
 *		historicalData: [ { location: { x: 0, y: 1, z: 3 }, date: 2020-10-11T17:00:41.939Z } ],
 *		__v: 1
 *	}
 *}
 */
router.get(
	"/:project_id/tracked-users/:user_id",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.getTrackedUserValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.getTrackedUser)
);


/**
 * @api {put} /projects/:project-id/tracked-items Put the location of the desired Item
 * @apiName Put Location of Item
 * @apiGroup Tracked Item
 * @apiDescription  Depending on the parameters chosen, the location of the user that made the call is estimated. Based on this location,
 * the items location is saved as with additional information
 * The location of the item is calculated by weighted trilateration (in case that the beacons measurement are used) or by GPS location.
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * 
 *
 * @apiParam {String="beacon-trilateration","gps-location"} location_method Method that will be used to calculate the user's location
 * @apiParam {String} item_id unique id of the Item
 * @apiParam {String} item_name name of the Item
 * @apiParam {String} item_description Description of item
 * @apiParam {String} [item_note] Additional Notes
 * 
 * 
 * @apiParam (Beacon Trilateration Parameter) {json[]} measurement_data List of Measurements taken for the localization
 * @apiParam (Beacon Trilateration Parameter) {Number} measurement_data.distance distance from Beacon. (in Meters)
 * @apiParam (Beacon Trilateration Parameter) {String} measurement_data.beacon_uid uid from Beacon that distance was taken from.
 * 
 * @apiParam (GPS Parameter) {json} measurement_data JSON object with data (STILL NOT IMPLEMENTED)
 * 
 * @apiParamExample {json} Request-Example:
 * {
 *  item_id: "xxxxxxxxxx",
 *  item_name: "name of Item",
 *  item_description:"Description of item",
 * 	location_method:"beacon-trilateration"
 * 	data:[
 * 			{ distance: 1, beacon_uid: "hereGoesBeaconUid" },
 *			{ distance: 2, beacon_uid: "hereGoesBeaconUid" },
 *			{ distance: 3, beacon_uid: "hereGoesBeaconUid"},
 *      ]
 * }
 * 
 * @apiSuccess  (Success 200) {String} message Indicates success of saving the Users location.
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  "message": "Successfully Stored Item's Location"
 *}
 */
router.put(
	"/:project_id/tracked-items",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.putTrackedItemValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.putTrackedItem)
);

/**
 * @api {get} /projects/:project-id/tracked-items Get list of locations of tracked items
 * @apiName Get List of Location of Tracked Items
 * @apiGroup Tracked Item
 * @apiDescription  Will return a list of tracked Items 
 * 
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * @apiSuccess  (Success 200) {json[]} list of tracked Items
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  tracked_items: [
 * {
 *   location: { x: 0, y: 1, z: 3 },
 *   name: 'item Name',
 *   description: 'item Description Here',
 *   item_id: '12345678'
 * }
 * ]
 *}
 */
router.get(
	"/:project_id/tracked-items",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.getTrackedItemsValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.getTrackedItems)
);


/**
 * @api {get} /projects/:project-id/tracked-items/:item_id Get location of tracked item
 * @apiName Get information about Tracked Items
 * @apiGroup Tracked Item
 * @apiDescription  Will return a list of tracked Items 
 * 
 * @apiHeader {String} access-token User token generated by login in.
 * @apiHeaderExample {json} Header-Example:
 *     {
 *       "Authorization": "TrackingAPI your-access-token-here"
 *     }
 * 
 * @apiSuccess  (Success 200) {json} tracked_item
 * @apiSuccessExample {json} Success-Response
 *   HTTP/1.1 200 OK
 *{
 *  tracked_item: 
 * {
 *	  notes: [],
 *	  entityType: 'TrackedItem',
 *	  _id: 5f833dd1a3a015102ceab4d2,
 *	  location: { x: 0, y: 1, z: 3 },
 *	  posted_by: {
 *	    _id: 5f1aaba0b8ee114a141cd0db,
 *	    email: 'test@test.com',
 *	    name: 'testingName'
 *	  },
 *	  name: 'item Name',
 *	  description: 'itemDescriptionNew',
 *	  item_id: '12345678',
 *	  last_updated_by: {
 *	    _id: 5f1aaba0b8ee114a141cd0db,
 *	    email: 'test@test.com',
 *	    name: 'testingName'
 *	  },
 *	  project_ref: 5f3aaba0b8ee114a141cd0da,
 *	  posted_date: 2020-10-11T17:16:01.124Z,
 *	  date: 2020-10-11T17:16:01.546Z,
 *	  historicalData: [ { location: [Object], date: 2020-10-11T17:16:01.124Z } ],
 *	  __v: 1
 *	}
 *}
 */
router.get(
	"/:project_id/tracked-items/:item_id",
	verifyBimPlusToken,
	verifyAccessToken,
	trackedEntitiesValidator.getTrackedItemValidation,
	trackedEntitiesValidator.validator,
	wrapper(trackingEntitiesController.getTrackedItem)
);


module.exports = router;